#!/usr/bin/env python3

import os
import argparse
import time
import textwrap
import subprocess
from dataclasses import dataclass
from collections import defaultdict
from subprocess import Popen, PIPE


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent("""\
            Power down RAID disks after a specified timeout
            Copyright (c)2015-2018 Thomas Kindler <mail+git@t-kindler.de>

            %(prog)s comes with ABSOLUTELY NO WARRANTY. This is free software,
            and you are welcome to redistribute it under certain conditions.
            See the GNU General Public Licence version 3 (or later) for details.
        """),
    )
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s 1.1.0",
    )
    parser.add_argument(
        "-t",
        "--timeout",
        dest="timeout",
        default=1800,
        type=int,
        help="standby timeout in seconds (default: %(default)s)",
    )
    parser.add_argument(
        "disk",
        nargs="+",
        help="Disks to monitor",
    )
    return parser.parse_args()


def group_drives(drive_list):
    groups = defaultdict(list)
    for drive_raw in drive_list:
        parts = drive_raw.split(":")
        group_name = parts[0] if len(parts) > 1 else "default"
        drive_name = parts[-1]
        groups[group_name].append(os.path.realpath(drive_name))
    return groups


def to_hms(s):
    return "%d:%02d:%02d" % (s / 3600, s / 60 % 60, s % 60)


def open_files(mount):
    command = subprocess.run(['lsof', '+f', '--', mount], stdout=subprocess.PIPE)
    return command.stdout.decode()


def get_diskstats():
    # see https://www.kernel.org/doc/Documentation/iostats.txt
    columns = [
        "major_dev_num",
        "minor_dev_num",
        "device",
        "reads",
        "reads_merged",
        "sectors_read",
        "ms_reading",
        "writes",
        "writes_merged",
        "sectors_written",
        "ms_writing",
        "current_ios",
        "ms_doing_io",
        "weighted_ms_doing_io",
    ]
    result = {}
    for line in open("/proc/diskstats"):
        parts = line.split()
        if len(parts) < len(columns):
            continue
        data = dict(zip(columns, parts))
        result[f"/dev/{data['device']}"] = {
            k: int(v) for k, v in data.items() if k != "device"
        }
    return result


@dataclass
class Array:
    name: str
    devices: list
    last_access: float
    last_standby: float
    timeout: int
    is_up: bool = True
    old_stats: dict = None

    def wake_up(self):
        print(f"Array {self.name!r}: Waking up after {to_hms(time.time() - self.last_access)} of inactivity")
        print(f"Array {self.name!r}: Open files:")
        print(open_files(self.name))
        for p in [
            Popen(["hdparm", "--read-sector", "0", d], stdout=PIPE)
            for d in self.devices
        ]:
            p.wait()

    def power_down(self):
        print(f"Array {self.name!r}: Powering down after {to_hms(time.time() - self.last_standby)}")
        # hdparm may take a long time, so execute in parallel
        for p in [
            Popen(["hdparm", "-y", d], stdout=PIPE)
            for d in self.devices
        ]:
            p.wait()

    def check(self, new_stats):
        now = time.time()
        if self.old_stats and self.old_stats != new_stats:
            if not self.is_up:
                self.is_up = True
                self.last_standby = now
                self.wake_up()
            self.last_access = now
        if now - self.last_access > self.timeout:
            if self.is_up:
                self.is_up = False
                self.power_down()
        self.old_stats = new_stats


if __name__ == "__main__":
    args = parse_args()

    print(f"Starting with timeout of {args.timeout} seconds")

    array_list = []
    for array_name, devices in group_drives(args.disk).items():
        now = time.time()
        array_list.append(Array(array_name, devices, now, now, args.timeout))

    for array in array_list:
        print(f"Array {array.name!r}: Added with devices {', '.join(array.devices)}")

    while True:
        stats = get_diskstats()
        for array in array_list:
            array_stats = {k: v for k, v in stats.items() if k in array.devices}
            array.check(array_stats)
        time.sleep(1)
